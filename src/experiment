#!/usr/bin/env python
# -*- coding:utf-8 -*-
## @package experiment
#
#  実験用ラッパースクリプト
import argparse
import os
import sys
import datetime
from exp_wrapper import gitlog, template
import json
import shutil
import glob
import re
from logging import getLogger
from logging import INFO, DEBUG
from logging import StreamHandler, FileHandler
from logging import Formatter
import errno


## コマンドライン引数のパーサを生成する関数
#
#  コマンドライン引数のパーサを生成する.@n
#  実際に動かしたいスクリプトのコマンドラインオプションと区別するために,
#  オプションのprefixは'-'ではなく'+'になっている.
#  実際に動かしたいスクリプトのパスが位置引数となっており, それ以外はオプション引数である.
#  @return parser パーサオブジェクト
def make_parser():
    # parserの設定
    parser_description = """
    Experiment wrapper script.\n
    This script manage input/output parameters and files.\n
    If the target script is managed by git,
    this script also output the git repository infomation.
    In order to distinguish this experiment wrapper script
    option from the target script option,
    the prefix chars of this script option is set to '+'.
    """

    parser = argparse.ArgumentParser(
        description=parser_description,
        prefix_chars='+',
        fromfile_prefix_chars='@',
        prog='experiment'
    )

    pyfile_help = """
    target python script to excute
    """
    parser.add_argument(
        'pyfile',
        type=str,
        metavar='python_script',
        help=pyfile_help
    )

    class_help = """
    target python class to excute
    """
    parser.add_argument(
        'classname',
        type=str,
        metavar='class_name',
        help=class_help
    )

    root_help = """
    root directory of the experiment
    """
    parser.add_argument(
        '+r', '++root',
        type=str,
        default='./output',
        help=root_help
    )

    comment_help = """
    comment statement
    """
    parser.add_argument(
        '+c', '++comment',
        type=str,
        default=None,
        help=comment_help
    )

    verbose_help = 'logging level'
    parser.add_argument(
        '+v', '++verbose',
        type=int,
        default=INFO,
        help=verbose_help
    )
    logfile_help = 'log file name'
    parser.add_argument(
        '+l', '++logfile',
        type=str,
        default=None,
        help=logfile_help
    )
    dir_help = 'directory name'
    parser.add_argument(
        '+d', '++dir',
        type=str,
        default=None,
        help=dir_help
    )

    return parser


## 指定したクラスを動的にimportする関数
#
#  @param pyfile_str 対象とするpythonスクリプトのパス文字列
#  @param class_str template.Mainを継承したクラス名の文字列
#  @param logger ロガーオブジェクト
#  @return クラス名とクラスを保持するリスト
def dynamic_import(pyfile_str, class_str, logger=getLogger()):
    abspath = os.path.abspath(pyfile_str)
    abspath_without_ext = os.path.splitext(abspath)[0]
    dir, module_name = os.path.split(abspath_without_ext)
    class_name = class_str
    logger.info('direcotry of target script: %s' % dir)
    logger.info('module name of target script: %s' % module_name)
    logger.info('name of target class: %s' % class_name)
    sys.path.append(dir)
    logger.info('modulename: %s' % module_name)
    try:
        class_ = getattr(__import__(module_name), class_name)
        logger.info('target class has been loaded')
    except ImportError as e:
        logger.exception(e)
        logger.error('No module named %s' % module_name)
    class_name = '%s.%s' % (module_name, class_name)
    return [class_name, class_]


## 実験結果等を保存するためのディレクトリを作成する関数
#
#  @param root_str 作成したいディレクトリのルートパス
#  @param module_name クラス名/モジュール名の文字列であり,
#  同名のディレクトリがroot_strで指定されたディレクトリ以下に作成される
#  @param date_str 日付を表す文字列であり, module_nameで指定されたディレクトリ以下に
#  日付を名前としたディレクトリが作成される
#  @param logger ロガーオブジェクト
#  @return 作成したディレクトリのパス文字列
def make_outputdir(root_str, module_name, dir_str, logger=getLogger()):
    output_dir = os.path.join(root_str, module_name, dir_str)
    output_dir = check_dir_name(output_dir)
    try:
        os.makedirs(output_dir)
        logger.info('%s has been created' % output_dir)
    except OSError as e:
        logger.exception(e)
    return output_dir


## コマンドライン引数をテキストファイルに保存する関数
#  @param allargs_ コマンドライン引数のリスト
#  @param output_dir ファイルを保存するパス文字列
#  @param logger ロガーオブジェクト
def save_args(allargs_, output_dir, logger=getLogger()):
    allargs = []
    for arg in allargs_:
        pattern = r"^\@"
        if re.match(pattern, arg):
            with open(arg[1:], 'r') as f:
                lines = f.read().split('n')
                for line in lines:
                    allargs.append(line)
        else:
            allargs.append(arg)
    logger.info('\ncommand line options: %s' % allargs)
    argfile_path = os.path.join(output_dir, 'args.txt')
    with open(argfile_path, 'w') as f:
        for arg in allargs:
            f.write(arg)
            f.write('\n')
    logger.info('%s has been created' % argfile_path)


## コマンドラインで指定したコメント文字列をテキストファイルに保存する関数
#  @param comment コメント文字列
#  @param output_dir ファイルを保存するパス文字列
#  @prama date_str 日付を表す文字列であり, ファイル名に付加される
#  @param logger ロガーオブジェクト
def save_comment(comment, output_dir, date_str, logger=getLogger()):
    if comment is not None:
        comment_file_path = os.path.join(
            output_dir, 'comment_%s.txt' % date_str
        )
        with open(comment_file_path, 'w') as f:
            f.write(comment)
        logger.info('%s has been created' % comment_file_path)


## 入出力ファイルのパスおよび入出力パラメータをjsonファイルに書き込む関数
#  @param io_params 入出力パラメータが記述されたjsonオブジェクト
#  @param io_files 入出力ファイルパスが記述されたjsonオブジェクト
#  @param date_str 日付を表す文字列であり, ファイル名に付加される
#  @param logger ロガーオブジェクト
#  @return 入出力ファイルパスの辞書
def save_io_to_json(
    io_params, io_files, output_dir, date_str, logger=getLogger()
):
    io_params_json_path = os.path.join(
        output_dir, 'io_params_%s.json' % date_str
    )
    with open(io_params_json_path, 'w') as f:
        f.write(io_params)
    logger.info('%s has been created' % io_params_json_path)
    io_files_json_path = os.path.join(
        output_dir, 'io_files_%s.json' % date_str
    )
    with open(io_files_json_path, 'w') as f:
        f.write(io_files)
    logger.info('%s has been created' % io_files_json_path)
    io_files_dict = json.loads(io_files)
    return io_files_dict


## リストに保存されたパスに関するシンボリックリンクを作成する関数
#  @param symlink_list シンボリックリンクを張りたいファイルのパス文字列が保存されたリスト
#  @param output_dir 実験結果の出力ディレクトリ(日付ディレクトリ)のパス文字列
#  @param dir_name output_dirで指定されたディレクトリ以下に作成される,
#  シンボリックリンクが張られるディレクトリの名前文字列
#  @param logger ロガーオブジェクト
def make_symboliclink(symlink_list, output_dir, dir_name, logger=getLogger()):
    input_files_link_dir = os.path.join(output_dir, dir_name)
    try:
        os.makedirs(input_files_link_dir)
        logger.info('%s has been created' % input_files_link_dir)
    except OSError as e:
        logger.exception(e)
        if e.errno != errno.EEXIST:
            raise
        pass
    for target, source in symlink_list.items():
        if os.path.exists(source):
            target_path = os.path.join(input_files_link_dir, target)
            source_abs = os.path.abspath(source)
            os.symlink(source_abs, target_path)
            logger.info(
                'symbolic link %s has been created' % target_path
            )


## 入出力ファイルのパスが記述された辞書に基づいて, 実験用スクリプトで生成された
#  出力ファイルを指定したディレクトリに移動する関数
#  @param output_files 入出力ファイルのパスが記述された辞書
#  @param output_dir 移動先のディレクトリパス文字列
#  @param logger ロガーオブジェクト
def move_output(output_files, output_dir, logger=getLogger()):
    output_files_dir = os.path.join(output_dir, 'output_files')
    try:
        os.makedirs(output_files_dir)
        logger.info('%s has been created' % output_files_dir)
    except OSError as e:
        logger.exception(e)
        if e.errno != errno.EEXIST:
            raise
        pass
    for output_file in output_files.values():
        if os.path.exists(output_file):
            ofiles = glob.glob('%s*' % output_file)
            for ofile in ofiles:
                shutil.move(ofile, output_files_dir)
                logger.info('%s has been moved' % ofile)


## ログファイルを指定ディレクトリに移動する関数
#  @param logfile ログのファイルオブジェクト
#  @param output_dir 移動先ディレクトリのパス文字列
def move_logfile(logfile, output_dir):
    if logfile is not None:
        output_files_dir = os.path.join(output_dir, 'output_files')
        try:
            os.makedirs(output_files_dir)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise
            pass
        if os.path.exists(logfile):
            shutil.move(logfile, output_files_dir)


## ロガーを作成する関数
#  @param logfile ログファイルのファイル名文字列
#  @param verbose 標準出力ハンドラに対するログレベル
#  @return ロガーオブジェクト
def make_logger(logfile, verbose):
    logger = getLogger(__name__)
    format_str = \
        "[%(asctime) -15s]\n%(filename)s," \
        "L%(lineno)s:%(levelname)s\t%(message)s"
    color_format_str = "\x1b[1;30m" + format_str + "\x1b[39;49;0m"
    color_format = Formatter(color_format_str)

    logger.setLevel(DEBUG)
    sh = StreamHandler()
    sh.setFormatter(color_format)
    sh.setLevel(verbose)
    logger.addHandler(sh)
    if logfile is not None:
        fh = FileHandler(logfile, 'w')
        fh.setLevel(DEBUG)
        format = Formatter(format_str)
        fh.setFormatter(format)
        logger.addHandler(fh)
    return logger


## ディレクトリ名がすでに存在していないかをチェックする関数
#  @param dir_name ディレクトリ名
#  @return 重複を回避したディレクトリ名
#
#  引数で与えたディレクトリ名がすでに存在している場合に
#  ディレクトリ名の末尾に数字を付加して返す
def check_dir_name(dir_name):
    if os.path.exists(dir_name):
        index = 1
        while os.path.exists(dir_name + '_' + str(index)):
            index += 1
        dir_name += '_' + str(index)
    return dir_name


## メイン関数
def main():
    # パーサーの生成
    parser = make_parser()

    # コマンドラインオプションをパース
    args, undefined_argv = parser.parse_known_args()

    # ログの出力レベルの設定
    logger = make_logger(args.logfile, args.verbose)

    # 実行するpythonファイルの動的import
    module_name, class_ = dynamic_import(args.pyfile, args.classname, logger)

    # スクリプト実行日時の文字列を取得
    tdatetime = datetime.datetime.now()
    date_str = tdatetime.strftime('%Y%m%d_%H%M_%S')
    if args.dir:
        dir_str = args.dir
    else:
        dir_str = date_str

    # 実験ファイルの出力ディレクトリを作成
    output_dir = make_outputdir(args.root, module_name, dir_str, logger)

    # コマンドラインオプションのパース情報をファイルに保存
    save_args(sys.argv[1:], output_dir, logger)

    # コメントファイルの作成
    save_comment(args.comment, output_dir, date_str, logger)

    # 実行するpythonファイルのコミット情報を出力
    gitlog.write_commitlog(os.path.abspath(args.pyfile), output_dir)

    # pythonファイルを実行
    obj = class_(undefined_argv)
    (io_params, io_files), error_str = template.main(obj)

    if error_str:
        new_output_dir = output_dir + '_' + error_str
        shutil.move(output_dir, new_output_dir)
        output_dir = new_output_dir
        if error_str is not 'KeyboardInterrupted':
            logger.error('unexpected error at %s' % module_name)
        else:
            logger.error('KeyboardInterrupt')

    # 入出力を表示(jsonを想定)
    logger.info('\n' + io_params.__str__())
    logger.info('\n' + io_files.__str__())

    # 入出力をjsonファイルに保存
    io_files_dict = save_io_to_json(
        io_params, io_files, output_dir, date_str, logger
    )

    # 入力ファイルのシンボリックリンクを作成
    make_symboliclink(
        io_files_dict['input_symlinks'], output_dir, 'input_symlinks', logger
    )

    # 出力ファイルの移動
    move_output(io_files_dict['output_files'], output_dir, logger)

    # 出力ファイルのシンボリックリンクを作成
    make_symboliclink(
        io_files_dict['output_symlinks'], output_dir, 'output_symlinks', logger
    )

    # ファイルハンドラを閉じる
    for handler in logger.handlers:
        if type(handler) is FileHandler:
            handler.close()

    # ログファイルを出力用ディレクトリに移動
    move_logfile(args.logfile, output_dir)


if __name__ == '__main__':
    main()
